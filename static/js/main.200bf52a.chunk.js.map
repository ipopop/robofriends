{"version":3,"sources":["components/AnimBG.jsx","components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","components/Scroll.jsx","components/ErrorBoundry.js","components/CounterButton.jsx","components/Header.jsx","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["AnimBG","className","Card","username","city","id","console","log","src","alt","CardList","robots","map","user","i","key","address","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","count","color","onClick","PureComponent","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","ipPending","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.200bf52a.chunk.js","sourcesContent":["import React from 'react'\nimport './AnimBG.css'\n\nfunction AnimBG(){\n  return (\n    <div className=\"area\" >\n            <ul className=\"circles\">\n                    <li></li>\n                    <li></li>\n                    <li></li>\n                    <li></li>\n                    <li></li>\n                    <li></li>\n                    <li></li>\n                    <li></li>\n                    <li></li>\n                    <li></li>\n            </ul>\n    </div >\n  )\n}\n\n\nexport default AnimBG","import React from 'react'\n\nfunction Card({ username, city, id }) {\n  console.log(username, city, id)\n  return (\n    <div className='card bg-light-blue tc dib br3 pa3 ma2 grow'>\n      <img\n        src={`https://robohash.org/set_set1/${id}?size=200x200`}\n        alt='a random robot'\n      />\n      <h2>{username}</h2>\n      <span>{city}</span>\n    </div>\n  )\n}\n\nexport default Card\n","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({ robots }) => {\n  console.log('CardList');\n  return (\n    <div className='tc'>\n      {robots.map((user, i) => {\n        return (\n          <Card\n            key={i}\n            id={robots[i].id}\n            username={robots[i].username}\n            city={robots[i].address.city}\n          />\n        )\n      })}\n    </div>\n  )\n}\n\nexport default CardList\n","import React from 'react'\n\nconst SearchBox = ({searchfield, searchChange}) => {\n  console.log('SearchBox');\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 mb4 ba br3 b--pink bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  )\n}\n\nexport default SearchBox\n","import React from 'react'\n\nconst Scroll = (props) => {\n  return ( \n    <div style={{ overflowY: 'scroll', height: '680px' }}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll","import React, { Component } from 'react'\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      hasError: false\n     };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    if (this.state.hasError) {\n    return (\n      <h1>Oooops. That is not good</h1>\n    )}\n    return (\n      this.props.children\n    )\n  }\n}\n\nexport default ErrorBoundry;","import React, { PureComponent }  from 'react'\n\nclass CounterButton extends PureComponent {\n  constructor() {\n    super()\n    this.state = {\n      count: 0\n    }\n  }\n  // shouldComponentUpdate(nextprops, nextState) {\n  //   if (this.state.count !== nextState.count) {\n  //     return true\n  //   } else {\n  //     return false\n  //   }\n  // }\n  updateCount = () => {\n    this.setState(state => {\n      return { count: this.state.count +1 }\n    })\n  }\n  render() {\n      console.log('CounterButton')\n      return <button color={this.props.color} onClick={this.updateCount}>Count : { this.state.count }</button>\n    }\n}\n\nexport default CounterButton;","import React, { Component }  from 'react'\nimport CounterButton from './CounterButton'\n\nclass Header extends Component {\n  // shouldComponentUpdate(nextprops, nextState) {\n  //   return false \n  // }\n  render() {\n      console.log('Header')\n      return (\n        <div>\n          <h1 className='f2'>RoboFriends</h1>\n          <CounterButton color={'teal'} />\n        </div>\n      )\n    }\n}\n\nexport default Header;","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport AnimBG from '../components/AnimBG'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport Header from '../components/Header'\n// import { robots } from '../robots'\nimport './App.css'\n\nimport { setSearchField, requestRobots } from '../actions'\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()),\n  }\n}\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots()\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props\n    const filteredRobots = robots.filter((robots) => {\n      return robots.username.toLowerCase().includes(searchField.toLowerCase())\n    })\n    return (\n    <div className='tc'>\n      <Header />    \n      <SearchBox searchChange={onSearchChange} />\n        <AnimBG />\n        <Scroll>\n          { isPending ? <h1 className='tc'>Loading...</h1> :\n            <ErrorBoundry>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundry>}\n        </Scroll>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED \n} from './constants'\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n    }","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED \n} from './constants'\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n    return Object.assign({}, state, { searchField: action.payload })\n    default:\n      return state\n  }\n}\n\nconst initialStateRobots = {\n  ipPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true })\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { robots: action.payload, isPending: false })\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false })\n      default:\n        return state\n  }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport './index.css'\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker'\nimport { searchRobots, requestRobots } from './reducers'\nimport 'tachyons'\n\nconst logger = createLogger()\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}